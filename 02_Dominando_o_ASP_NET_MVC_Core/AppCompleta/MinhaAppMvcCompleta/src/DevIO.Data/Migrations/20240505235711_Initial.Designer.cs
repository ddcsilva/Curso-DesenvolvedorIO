// <auto-generated />
using System;
using DevIO.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevIO.Data.Migrations
{
    [DbContext(typeof(MeuDbContext))]
    [Migration("20240505235711_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevIO.Business.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("END_ID")
                        .HasColumnOrder(1)
                        .HasComment("Identificador Único do Endereço");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("END_BAIRRO")
                        .HasColumnOrder(6)
                        .HasComment("Bairro do Endereço");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)")
                        .HasColumnName("END_CEP")
                        .HasColumnOrder(5)
                        .HasComment("CEP do Endereço");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("END_CIDADE")
                        .HasColumnOrder(7)
                        .HasComment("Cidade do Endereço");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("END_COMPLEMENTO")
                        .HasColumnOrder(4)
                        .HasComment("Complemento do Endereço");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("END_ESTADO")
                        .HasColumnOrder(8)
                        .HasComment("Estado do Endereço");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("END_LOGRADOURO")
                        .HasColumnOrder(2)
                        .HasComment("Logradouro do Endereço");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("END_NUMERO")
                        .HasColumnOrder(3)
                        .HasComment("Número do Endereço");

                    b.HasKey("Id")
                        .HasName("PK_ENDERECOS");

                    b.HasIndex("FornecedorId")
                        .IsUnique();

                    b.ToTable("TB_ENDERECOS", null, t =>
                        {
                            t.HasComment("Tabela de Endereços");
                        });
                });

            modelBuilder.Entity("DevIO.Business.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FOR_ID")
                        .HasColumnOrder(1)
                        .HasComment("Identificador Único do Fornecedor");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("FOR_ATIVO")
                        .HasColumnOrder(5)
                        .HasComment("Indica se o Fornecedor está Ativo");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("FOR_DOCUMENTO")
                        .HasColumnOrder(3)
                        .HasComment("Documento do Fornecedor");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FOR_NOME")
                        .HasColumnOrder(2)
                        .HasComment("Nome do Fornecedor");

                    b.Property<int>("TipoFornecedor")
                        .HasColumnType("int")
                        .HasColumnName("FOR_TIPO")
                        .HasColumnOrder(4)
                        .HasComment("Tipo do Fornecedor");

                    b.HasKey("Id")
                        .HasName("PK_FORNECEDORES");

                    b.HasIndex("Documento")
                        .IsUnique()
                        .HasDatabaseName("IX_FORNECEDORES_DOCUMENTO")
                        .HasFilter("[FOR_DOCUMENTO] IS NOT NULL");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_FORNECEDORES_NOME")
                        .HasFilter("[FOR_NOME] IS NOT NULL");

                    b.ToTable("TB_FORNECEDORES", null, t =>
                        {
                            t.HasComment("Tabela de Fornecedores");
                        });
                });

            modelBuilder.Entity("DevIO.Business.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PRO_ID")
                        .HasColumnOrder(1)
                        .HasComment("Identificador Único do Produto");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("PRO_ATIVO")
                        .HasColumnOrder(7)
                        .HasComment("Indica se o Produto está Ativo");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2")
                        .HasColumnName("PRO_DATA_CADASTRO")
                        .HasColumnOrder(6)
                        .HasComment("Data de Cadastro do Produto");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("PRO_DESCRICAO")
                        .HasColumnOrder(3)
                        .HasComment("Descrição do Produto");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagem")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRO_IMAGEM")
                        .HasColumnOrder(4)
                        .HasComment("Nome do Arquivo da Imagem do Produto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("PRO_NOME")
                        .HasColumnOrder(2)
                        .HasComment("Nome do Produto");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("PRO_VALOR")
                        .HasColumnOrder(5)
                        .HasComment("Valor do Produto");

                    b.HasKey("Id")
                        .HasName("PK_PRODUTOS");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_PRODUTOS_NOME")
                        .HasFilter("[PRO_NOME] IS NOT NULL");

                    b.ToTable("TB_PRODUTOS", null, t =>
                        {
                            t.HasComment("Tabela de Produtos");
                        });
                });

            modelBuilder.Entity("DevIO.Business.Models.Endereco", b =>
                {
                    b.HasOne("DevIO.Business.Models.Fornecedor", "Fornecedor")
                        .WithOne("Endereco")
                        .HasForeignKey("DevIO.Business.Models.Endereco", "FornecedorId")
                        .IsRequired()
                        .HasConstraintName("FK_ENDERECO_FORNECEDOR");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("DevIO.Business.Models.Produto", b =>
                {
                    b.HasOne("DevIO.Business.Models.Fornecedor", "Fornecedor")
                        .WithMany("Produtos")
                        .HasForeignKey("FornecedorId")
                        .IsRequired()
                        .HasConstraintName("FK_PRODUTO_FORNECEDOR");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("DevIO.Business.Models.Fornecedor", b =>
                {
                    b.Navigation("Endereco");

                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
